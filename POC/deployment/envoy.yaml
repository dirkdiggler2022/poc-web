admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
  - name: listener_8000
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog            

          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  # host_rewrite_literal: host.docker.internal
                  cluster: service_envoyproxy_io
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  - name: listener_8443
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          # codec_type: AUTO
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog              
          # scheme_header_transformation:
            
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  # host_rewrite_literal: host.docker.internal
                  cluster: service_envoyproxy_io_secure
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            # The following self-signed certificate pair is generated using:
            # $ openssl req -x509 -newkey rsa:2048 -keyout a/front-proxy-key.pem -out  a/front-proxy-crt.pem -days 3650 -nodes -subj '/CN=front-envoy'
            #
            # Instead of feeding it as an inline_string, certificate pair can also be fed to Envoy
            # via filename. Reference: https://envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#config-core-v3-datasource.
            #
            # Or in a dynamic configuration scenario, certificate pair can be fetched remotely via
            # Secret Discovery Service (SDS). Reference: https://envoyproxy.io/docs/envoy/latest/configuration/security/secret.
            - certificate_chain:
                inline_string: |
                    -----BEGIN CERTIFICATE-----
                    MIIFNzCCAx+gAwIBAgIUHOdHruUshaLjiA/EyI+FIAe/1q8wDQYJKoZIhvcNAQEL
                    BQAwRzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxFDASBgNVBAoM
                    C215IG93biBjZXJ0MQ0wCwYDVQQLDARtaW5lMB4XDTI0MDUyMzA4NTEzNVoXDTI1
                    MDUyMzA4NTEzNVowDzENMAsGA1UEAwwETXljbjCCAiIwDQYJKoZIhvcNAQEBBQAD
                    ggIPADCCAgoCggIBALVL325XCG/xjQZWUgBYfWuoneOYwBPJaXZqs/Doq95EEToV
                    h6UGXisRvO1Cg6RWTpkg1Q1jFybgIBskQ08dMWRMSWdyyJz/XoZ+pNSs4q69fIX1
                    FE5D/6t1PsxPOaxEnJHDHf3DOATqREkcnTAyK9FYTc8gTn9MQuUeyqLCtsvd8Lq5
                    v6DBTf+VGkSGZ1v7BkaulpaFbUawGafWKHYpsQ/pbYWL4yLP0Q5YatBhhDJxkIVF
                    XfofSC0HJ4xzWzziRjMlgdVaPQR9WztpDz4g5Iy8npjxMZsVOsPRQAoyExMfRFjG
                    vwmaDlXfK4M4Us7Kt2HJBH5LZJg9mfGYuhXQm04VwdmkNoSag6tER4jLhnJO7rW0
                    HKaL6H0cTvgfm1EBhf2NZMcjP/0qtyYafNGgROfBPnrorlhawbFLMFpz+TSFaglu
                    q7ynCNwDZgtBLQsZjGBk44qvMm1LarieAg7icqub48W7k9raNixC6SzUYaqjTGak
                    TO9RxoNXQRWE8lw4CfToGe4k637R07jV6AZJGDCqyMkkCtM4e2NUNpXMtX/5DLti
                    Y9HMkNFre9DYzQbCCTm1xU2btXe532MsYVPjIEJu7pff+OnbbqXBTqnfOivcnRjD
                    NOVk0AzfXtfZ510M3WWRHftMYukPLHWztjsY8RRhZc3B+xjdRhOHwPUKSjDLAgMB
                    AAGjUzBRMA8GA1UdEQQIMAaHBMCoARAwHQYDVR0OBBYEFP4eGU19MXDqZyxGeiNw
                    8JpvSUrxMB8GA1UdIwQYMBaAFKDcBEu3BBhucXAs1UCoPRFiDnv5MA0GCSqGSIb3
                    DQEBCwUAA4ICAQAkDfMcmodvCDLsBX+Nai2jqVbs3y1rFzIjLkLS9eA40qg1S+c8
                    yIEJs+aKex8P5hFvz3WW5CEM472arLr4OPezUjn/N6ADX16iPN9LPdjyaZ+pZy+P
                    sbVzx3K1nIkBZRUmjzUSMBtRWFUFaZg8OTJiB0s4Xr8431LgHl24zKuqHqXArPmG
                    LUh6jE7mZCP9yTbrnN1SGcCUNlFHAbalvO328C7OHPrxKlgbFvcGjU2hkuRMcaSm
                    k5wB+1m8gyPUiOidrqK5q9r3WlwXPRcz6bvVU5dzm5a2v96ZXqFQFbEaTkJfSwZR
                    M0XmqT3TIzOfJYMrjrBzHpIktSLkQyebrAzobM3qSKp1tHbIKfSRKDCMxxeIQVFM
                    BPTBt6C6pUO1GdGP7t3CIGn8ic03yku0TJSzN2x2lgox1d1ox5xxdPAoLcoKhZ3g
                    sgHe9JeLP6bulgwrn33QEKXtmAE9SsrLLHm/sNriJ9N7VQO2lybQzqGsYX692uaT
                    d6YuwghTq10AK/xSnF+QJ2OZRutj+IdStWmlCofeUwrXa46EvRASILUVqWAPr1Qc
                    1o0slHdUsOo0TKJ9DjhYdbDrghGAByeaJjLshGVqZMcg520k5oysgwgckOWXI3Bo
                    P6caaRlkKqBF3Mu21CG2c6qeZDOSNJGcZW1HtvgbhCfPoAmK1uM/x+JULg==
                    -----END CERTIFICATE-----

              private_key:
                inline_string: |
                    -----BEGIN PRIVATE KEY-----
                    MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQC1S99uVwhv8Y0G
                    VlIAWH1rqJ3jmMATyWl2arPw6KveRBE6FYelBl4rEbztQoOkVk6ZINUNYxcm4CAb
                    JENPHTFkTElncsic/16GfqTUrOKuvXyF9RROQ/+rdT7MTzmsRJyRwx39wzgE6kRJ
                    HJ0wMivRWE3PIE5/TELlHsqiwrbL3fC6ub+gwU3/lRpEhmdb+wZGrpaWhW1GsBmn
                    1ih2KbEP6W2Fi+Miz9EOWGrQYYQycZCFRV36H0gtByeMc1s84kYzJYHVWj0EfVs7
                    aQ8+IOSMvJ6Y8TGbFTrD0UAKMhMTH0RYxr8Jmg5V3yuDOFLOyrdhyQR+S2SYPZnx
                    mLoV0JtOFcHZpDaEmoOrREeIy4ZyTu61tBymi+h9HE74H5tRAYX9jWTHIz/9Krcm
                    GnzRoETnwT566K5YWsGxSzBac/k0hWoJbqu8pwjcA2YLQS0LGYxgZOOKrzJtS2q4
                    ngIO4nKrm+PFu5Pa2jYsQuks1GGqo0xmpEzvUcaDV0EVhPJcOAn06BnuJOt+0dO4
                    1egGSRgwqsjJJArTOHtjVDaVzLV/+Qy7YmPRzJDRa3vQ2M0Gwgk5tcVNm7V3ud9j
                    LGFT4yBCbu6X3/jp226lwU6p3zor3J0YwzTlZNAM317X2eddDN1lkR37TGLpDyx1
                    s7Y7GPEUYWXNwfsY3UYTh8D1CkowywIDAQABAoICAEz9ToH2FdAsHP5e8+3Pplts
                    vLglaxQ8CTxPbeDVff8imso20GbFQII7wyZig7LrL++ZYMCRnwhUT24XRTo4pHv6
                    ZYW32ffJ/qNQ7sCeNpmMQHBGtnvSJqXyYVu0HULJ1E+WM4tLNuPndF4z95C7DZ6W
                    SFy4VH18rj/MhrL9y1DiDFPPg9BJpsztzbzh8sy92llz1OFRAintqMd8i6w6YkXm
                    lCsNT8S9ygK0i4+4icI+NehSn+kTFbyBeEsNxeYiFTutJuiqrJTWg0LEh8OThls5
                    0oQSkUVRi6YSm4Z4417QfV7R79itAn93CWxtI8VLkvrEudLEQ5DfQBu4BvYyo3Cb
                    Trf9/uaFiFwWI9R4YZ0h0A6xFrrpYC4lthJ6+FqGLrFNSRvcUgp+VrxAKsgEkYMH
                    t44ZctxxO7cqKteUosnrkmNxoLn1hKKEdPxyRDRU3aM7s8hm76UhsMd6hVbLa6rA
                    OEoIiLbJZZIlytesFoLghA6mG5QKVeyuljmgs22207NxJ56/zCaVqWIzuRxju0vc
                    sYpFSQJ0LMgor/cg23r5j7V4oBVfdgsmYXZsCUcesGg+0H2ZNkBPdk3sDkQQWIwn
                    limaPmU5EiOfwPx5lOulVLy53pwYSG6Z8HBfK+wkTB3EBeSqyxsxsnVM2qMRPSrH
                    ZNRPN0plbIqXLUlEDdypAoIBAQDjjvmlYc8fQ3FXEwy/6y28FBudPGjgVjmKpaFR
                    NBpoTVCG58ltaQq5RIaUK/ccPad79RmQDuJZQg9WMloQRu8J+7iq1Fz3ZY4QBaHV
                    WhzngvyZ0N4n0No5zCjL+Tqpk0DaitFbrNiL+XRrH3I3vqkmVMAYqACNcsThQ9rI
                    oXCX/knAepT9AEo7c8rzzxDTN7NSYYNYEucMoXROjw+p0bU8XHe1A2Iln+0Sxge0
                    nmJRAdm8kcXftUqHMK64N79jPPKwmGqVwwaXJFutQNoeq0cupoSHAv3ZTeImO10G
                    XIGTYfvQnLLqU+Im3pnnkaCueBXvR8MgVXMCaW12a4z1WDF/AoIBAQDL9K6X9Q4K
                    F/M5KCJ87gMA8pF4GVEa+zG3R+PFXzTFtkHBC8H43CL6v/LOww8Uy/PsCeKz8doQ
                    noa9dicssiWPewSvYe7GFe8wLFmR75+22jEpikUwCsmFJtyda+SBaCiS8PlMINFe
                    hjLup77x52x0sH/mzqoTAEvRG/Da3Qa4o2JVIqyi9QjzuFq+t7jFYaEeLuVomIdR
                    j/568RXHnjB629GBAgFw/RoPpqWhillFz1t95kTt5zwl4cCZ/AKd7JjlnrasT6qg
                    ySWgS8UKQH5RVP/1/8FYV53DjQAtxD48SG0I1cEYoVFs39Pf8D8rTiN2zYyc/xGg
                    L6CKxY7sZc61AoIBAAjGN4wP9GuRLyqbWm+AAvhwkgwDC0wzJu7Yqhq2dpo0+Pjq
                    sRKd7ULtiH7oHxQgsHeQINc0K7gjWvII6P4drhPld95mZ9tGOC8X+ICAhALNQy4v
                    JpHEdNWrsJsE1iU5v1Nt7NqrFIJ5MOr8gGvz1xPaSrnoqHTLyxmggywfRXcm3/Mj
                    BuGmhDY8pcO25UAvsqNnjSf1OqF7DEAHNiRnKKTWL+tz4PHwc7S4nA1z2fijqKCj
                    wkx48hG6Z9JEnAWYkQcMKXfy2Cs1xK8ug/qQwiLjWtLV47HgVesBePnI0Vo8efg2
                    QpPUfjDffnG2ZMq1aKscSkLR6KhcJlNdnEbNisMCggEACJoNMwN20B4qd+Klcbdo
                    EQYp9HK85PJrKlux04UsaJpDM60XRTOjlge6adX4MNxZMT9JfGVa2RCWhi8Rf+UT
                    iHWbwPnUZC5QpCt6q5j7l26kXCgkut35mdAFxe3i+UI3U9st6HQJ4H6wbzhL6U/l
                    VxaKjmVw7tQ4Xl1bTx+7RNY/M2/+7/B9rCm+SgTdmhWAAhHgQwULz/jOtsisLnsR
                    eF0E/Pfkr6s9CiPxIFsBYNxZ83lettnlw4M96ECkq5xq5mRHOAU0IQvatmP7r28A
                    5NU85lcfBGbNlI3B0CxSo6A6WQEK38sN8BWQjgVH5L+q5zvMDmMDj0ny72ddm8K/
                    cQKCAQEAitFkzKre0w4DgyvUHNPsJpH3puLQ5hZplIewKe3Lhwwt7w0SoYGqaTk7
                    B5z8d7BNF2+F79iSCCZ62gcQy8dzy/BWqJZN2xkY38niVMCHZIIkyc04tHDnD4HQ
                    S+re1X4LT8aBi0SmGyi6ISj7sBWOPOHyUldgRH8yEkbWmpY1in9c4Wo5xl/+aphe
                    BnPORwPnoh/Act4fuhgAp9/DJrWdpsECBd6xLpFSr28zHx6ar5o3GIoRcvzAFGQU
                    zmQE8vRwixtH5bpki9gK75SEr7KTeTMTGvygKni+uBaYN69BQAkW6Ltv5Aj2qhkt
                    czsyuyMZcWmYQigquUhg5IA9olyDUQ==
                    -----END PRIVATE KEY-----

  clusters:
  - name: service_envoyproxy_io
    connect_timeout: 30s
    type: STRICT_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: service_envoyproxy_io
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: public.frontend
                port_value: 8080
  - name: service_envoyproxy_io_secure
    connect_timeout: 30s
    type: STRICT_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: service_envoyproxy_io_secure
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: public.frontend
                port_value: 8081